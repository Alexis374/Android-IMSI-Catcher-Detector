apply plugin: 'com.android.application'

//======================================================================
// TODO: (There must be a simpler way to do this!)
// These will import versionCode and versionName from AndroidManifest.xml
// Most important is that these function names are unique. 
// versionCode can auto update the version number.
// Then put this function inside the defaultConfig { ... }}
// See: http://tinyurl.com/kuu2rve
//======================================================================

def getManifestVersionCode() {
     println "Importing with getManifestVersionCode()"
     def manifestFile = file("AndroidManifest.xml")
     def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
     def manifestText = manifestFile.getText()
     def matcher = pattern.matcher(manifestText)
     matcher.find()
     //def version = ++Integer.parseInt(matcher.group(1)) // Update version number
     def version = Integer.parseInt(matcher.group(1)) 
     println sprintf("Returning version %d", version)
     return "$version"
}
// TODO: Fix this one
def getManifestVersionName() {  
     println "Importing with getManifestVersionName()"
     def manifestFile = file("AndroidManifest.xml")
     def pattern = Pattern.compile("versionName=\"(\\.+)\"")
     def manifestText = manifestFile.getText()
     def matcher = pattern.matcher(manifestText)
     matcher.find()
     //def zname = ++Integer.parseInt(matcher.group(1))
     println sprintf("Returning version %s", zname)
     return "$zname"
}

//======================================================================

android {
    compileSdkVersion 19
    buildToolsVersion '19.1'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
        // versionCode getManifestVersionCode()
        // versionName getManifestVersionName()
    }
    buildTypes {
        debug {
            try {
                buildConfigField 'String', 'OPEN_CELLID_API_KEY', '\"' + open_cellid_api_key + '\"'
            } catch (MissingPropertyException e) {
                buildConfigField 'String', 'OPEN_CELLID_API_KEY', '"NA"'
            }
        }
        release {
            buildConfigField 'String', 'OPEN_CELLID_API_KEY', '"NA"'
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    signingConfigs {
        release {
        signingConfig signingConfigs.release
        }
        debug {
            keyAlias 'androiddebugkey'
        }
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    productFlavors {
    }

    lintOptions {
        abortOnError false
    }

// .. set up build flavors etc here

//======================================================================
// Release signing by reading values of your own signing.properties file
//----------------------------------------------------------------------
// Don't worry, your signing.properties cannot be uploaded to our GitHub
// .gitignore has been instructed to exclude this file from your uploads
//======================================================================

def Properties props = new Properties()
def propFile = new File("signing.properties")
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null
            && props.containsKey("KEYSTORE_FILE")
            && props.containsKey("KEYSTORE_PASSWORD")
            && props.containsKey("KEY_ALIAS")
            && props.containsKey("KEY_PASSWORD")) {

        def keystoreFile = new File(props["KEYSTORE_FILE"])
        if (keystoreFile.canRead()) {
            android.signingConfigs.release.storeFile = keystoreFile
            android.signingConfigs.release.storePassword = props["KEYSTORE_PASSWORD"]
            android.signingConfigs.release.keyAlias = props["KEY_ALIAS"]
            android.signingConfigs.release.keyPassword = props["KEY_PASSWORD"]
        } else {
            println("keystore file not found: " + props["KEYSTORE_FILE"])
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println("signing.properties found but some entries missing")
        android.buildTypes.release.signingConfig = null
    }
} else {
    println("signing.properties not found")
    android.buildTypes.release.signingConfig = null
}

//======================================================================
// Instead of "app-release.apk" this method will rewrite the name to
// "MyCoolCompany-MyNewProduct-v<defaultConfig.versionName>-RELEASE.apk"
// which is much better suited for archiving and overall handling
//----------------------------------------------------------------------
// To restore the default behavior just delete the whole block below
// WARNING by E:V:A: This is NOT Working, generates: "AIMSICD-null.apk"
//======================================================================

    applicationVariants.all { variant ->

        def apk = variant.outputFile;
        def newName;

        //newName = apk.name.replace(".apk", "-v" + defaultConfig.versionName + "-" + variant.buildType.name.toUpperCase() + ".apk");
        newName = apk.name.replace(".apk", "-" + defaultConfig.versionName + ".apk");

        newName = newName
                .replace("-" + variant.buildType.name, "") // This removes "-release"
                .replace(project.name, "AIMSICD");         // This replace app with "AIMSICD"

        variant.outputFile = new File(apk.parentFile, newName);

        if (variant.zipAlign) {
            variant.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
        }

        logger.info('INFO: Set outputFile to ' + variant.outputFile + " for [" + variant.name + "]");
    }


    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }
}

dependencies {
    compile project(':third_party:RootTools')

    compile 'com.android.support:support-v4:19.1.0'
    compile 'org.osmdroid:osmdroid-android:4.2'
    compile 'eu.lp0.slf4j:slf4j-android:1.7+'
    compile 'org.apache.httpcomponents:httpmime:4.2.1'
    compile 'au.com.bytecode:opencsv:2.4'
}
